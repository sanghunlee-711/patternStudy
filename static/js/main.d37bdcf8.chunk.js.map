{"version":3,"sources":["components/Item.tsx","components/ProgressBar.tsx","utility/api.ts","ToDo.tsx","reportWebVitals.ts","index.tsx"],"names":["ListWrapper","styled","ul","ButtonWrapper","div","props","forlining","TitleAndChekcWrapper","ListCheck","EachList","li","Item","itemList","map","el","index","todoChecking","onClick","todoCheck","id","className","check","type","name","value","changeValue","onChange","e","modifyInput","typedValue","doneFunc","modifyFunc","deleteFunc","ProgressBarContainer","ProgressBarWrapper","ProgressBarRange","undefined","count","isNaN","ProgressNum","span","ProgressBar","toLocaleString","maximumFractionDigits","api","url","fetch","headers","Accept","then","res","console","log","json","ok","Error","statusText","data","TodoContainer","section","TitleWrapper","TodoWrapper","InputWrapper","Title","ToDo","useState","title","item","setItemList","text","setText","setChangeValue","setCount","useEffect","catch","error","todoCount","target","String","doCount","doLen","length","forEach","concat","makeNew","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d37bdcf8.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { ItemInterface, ItemListInterFace } from \"../interface/ItemInterface\";\n\nfunction Item(props: {\n  item: ItemInterface;\n  itemList: ItemListInterFace;\n  deleteFunc: (id: number) => void;\n  modifyFunc: (id: number, value: string) => void;\n  doneFunc: (id: number, value: string, changeValue: string) => void;\n  changeValue: string;\n  modifyInput: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  todoCheck: (id: number, todoChecking: boolean | undefined) => void;\n}): React.ReactElement {\n  return (\n    <ListWrapper>\n      {props.itemList?.map((el: ItemInterface, index) => {\n        return (\n          <EachList key={`thisKey${el.id + index}`}>\n            <ListCheck forlining={el.todoChecking}>\n              <TitleAndChekcWrapper>\n                <div onClick={() => props.todoCheck(el.id, el.todoChecking)}>\n                  {el.todoChecking ? (\n                    <i className=\"far fa-check-square\"></i>\n                  ) : (\n                    <i className=\"far fa-square\"></i>\n                  )}\n                </div>\n                {el.check ? (\n                  <input\n                    type=\"text\"\n                    name=\"modify\"\n                    value={\n                      // props.changeValue.length > 0\n                      //   ? props.changeValue\n                      //   : el.typedValue\n                      props.changeValue\n                    }\n                    onChange={(e) => props.modifyInput(e)}\n                  />\n                ) : (\n                  <span>{el.typedValue}</span>\n                )}\n              </TitleAndChekcWrapper>\n              <ButtonWrapper forlining={el.todoChecking}>\n                {el.check ? (\n                  <button\n                    onClick={() =>\n                      props.doneFunc(el.id, el.typedValue, props.changeValue)\n                    }\n                  >\n                    <i className=\"fas fa-check-circle\"></i>\n                  </button>\n                ) : (\n                  <button\n                    name=\"done\"\n                    onClick={() => props.modifyFunc(el.id, el.typedValue)}\n                  >\n                    <i className=\"fas fa-pen\"></i>\n                  </button>\n                )}\n                <button name=\"delete\" onClick={() => props.deleteFunc(el.id)}>\n                  <i className=\"far fa-trash-alt\"></i>\n                </button>\n              </ButtonWrapper>\n            </ListCheck>\n          </EachList>\n        );\n      })}\n    </ListWrapper>\n  );\n}\n\nconst ListWrapper = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  justify-content: spac;\n  align-items: center;\n  padding: 0;\n\n  button {\n    background-color: white;\n    border: none;\n  }\n`;\n\nconst ButtonWrapper = styled.div<{ forlining: boolean | undefined }>`\n  margin-right: 10px;\n\n  button {\n    background-color: ${(props) => (props.forlining ? \"whitesmoke\" : \"white\")};\n  }\n`;\n\nconst TitleAndChekcWrapper = styled.div`\n  display: flex;\n  margin-left: 10px;\n  input {\n    margin-left: 10px;\n  }\n  span {\n    margin-left: 10px;\n  }\n`;\n\nconst ListCheck = styled.div<{ forlining: boolean | undefined }>`\n  background-color: ${(props) => (props.forlining ? \"whitesmoke\" : \"white\")};\n  text-decoration: ${(props) => (props.forlining ? \"line-through\" : \"none\")};\n\n  display: flex;\n  justify-content: space-between;\n\n  padding: 10px;\n`;\n\nconst EachList = styled.li`\n  width: 100%;\n  /* padding: 20px 0; */\n  border-top: 1px solid black;\n  color: #489cc1;\n\n  &:nth-child(odd) {\n    border-top: 1px solid #f7f7f7;\n    border-bottom: 1px solid #f7f7f7;\n  }\n  &:nth-child(even) {\n    border-top: none;\n    border-bottom: 1px solid #f7f7f7;\n  }\n`;\n\nexport default Item;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ItemInterface, ItemListInterFace } from \"../interface/ItemInterface\";\n\nfunction ProgressBar(props: {\n  count: number;\n  itemList: number | null | undefined;\n}): React.ReactElement {\n  return (\n    <ProgressBarContainer>\n      <ProgressBarWrapper>\n        <ProgressBarRange count={props.count}></ProgressBarRange>\n      </ProgressBarWrapper>\n      <ProgressNum>\n        {isNaN(props.count)\n          ? 0\n          : props.count.toLocaleString(undefined, {\n              maximumFractionDigits: 3,\n            })}\n        %\n      </ProgressNum>\n    </ProgressBarContainer>\n  );\n}\n\nconst ProgressBarContainer = styled.div`\n  position: fixed;\n  bottom: 5vh;\n  right: 20vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ProgressBarWrapper = styled.div`\n  margin-left: 10vw;\n  min-width: 10vw;\n  max-width: 10vw;\n  height: 5vh;\n  border: 1px solid goldenrod;\n  border-radius: 4px;\n`;\nconst ProgressBarRange = styled.div<{ count: number }>`\n  transition: all 0.5s ease-in-out;\n  background-color: #f7e43b;\n  width: ${(props) =>\n    props.count === undefined || props.count === null || isNaN(props.count)\n      ? 0\n      : props.count}%;\n  height: 100%;\n  border-radius: 4px;\n\n  div {\n    transition: all 0.5s ease-in-out;\n    color: goldenrod;\n    position: absolute;\n    padding: 15px 0px 15px 30px;\n    margin: auto 0;\n  }\n  animation-name: chargeShowing;\n  animation-duration: 3s;\n\n  @keyframes chargeShowing {\n    from {\n      background-color: goldenrod;\n      width: 100%;\n    }\n    to {\n      background-color: white;\n      width: 0;\n    }\n  }\n`;\n\nconst ProgressNum = styled.span`\n  color: goldenrod;\n  text-align: center;\n  width: 100%;\n  margin-left: 1vw;\n`;\n\nexport default ProgressBar;\n","import { ItemInterface } from \"../interface/ItemInterface\";\n\ntype ItemListInterFace = Array<ItemInterface> | undefined | null;\n\nconst api = (url: string): Promise<ItemListInterFace> => {\n  return fetch(url, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  }).then((res) => {\n    console.log(res.json());\n    if (!res.ok) {\n      throw new Error(res.statusText);\n    }\n    return res.json().then((data) => data as ItemListInterFace);\n  });\n};\n\nexport default api;\n\n","import React from \"react\";\nimport Item from \"./components/Item\";\nimport ProgressBar from \"./components/ProgressBar\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport api from \"./utility/api\";\nimport styled from \"styled-components\";\nimport { ItemInterface, ItemListInterFace } from \"./interface/ItemInterface\";\n\n//Observer Pattern 적용\nfunction ToDo(): React.ReactElement {\n  const [item, setItemInput] = useState<ItemInterface>({\n    title: \"\",\n    typedValue: \"\",\n    id: 0,\n    check: false,\n  });\n  const [itemList, setItemList] = useState<ItemListInterFace>([]);\n  const [text, setText] = useState<string>(\"\");\n  const [changeValue, setChangeValue] = useState<string>(\"\");\n  const [count, setCount] = useState<number>(0);\n\n  useEffect(() => {\n    // call data.json and setState Session\n    let dataDir = \"./data/data.json\";\n    api(dataDir)\n      .then((res) => {\n        setItemList(\n          res?.map((el) => ({ ...el, check: false, todoCheck: false }))\n        );\n      })\n      .catch((error) => {\n        console.log(\"Have Error in UseEffect\", error);\n      });\n  }, []);\n\n  useEffect(() => {\n    todoCount(itemList);\n  }, [itemList]);\n\n  useEffect(()=>{\n    todoCount(itemList)\n  },[itemList])\n\n  const makeNew = (text: string) => {\n    setItemList(\n      itemList?.concat({\n        title: `sample${itemList.length + 1}`,\n        typedValue: text,\n        id: itemList.length + 1,\n        check: false,\n        todoChecking: false,\n      })\n    );\n    setText(\"\");\n  };\n\n  const deleteFunc = (id: number) => {\n    setItemList(itemList?.filter((el: ItemInterface) => el.id !== id));\n  };\n\n  const modifyFunc = (id: number, value: string) => {\n    setChangeValue(value);\n    setItemList(\n      itemList?.map((el) =>\n        el.id === id\n          ? {\n              ...el,\n              check: true,\n            }\n          : el\n      )\n    );\n  };\n\n  const modifyInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { name, value },\n    } = e;\n    if (String(name) === \"modify\") {\n      setChangeValue(value);\n    } else if (String(name) === \"make\") {\n      setText(value);\n    }\n  };\n\n  const doneFunc = (id: number, value: string, changeValue: string) => {\n    setItemList(\n      itemList?.map((el) =>\n        el.id === id\n          ? {\n              ...el,\n              typedValue: changeValue.length > 0 ? changeValue : el.typedValue,\n              check: false,\n            }\n          : el\n      )\n    );\n    setChangeValue(\"\");\n  };\n\n  const todoCheck = (id: number, todoChecking: boolean | undefined) => {\n    if (todoChecking) {\n      setItemList(\n        itemList?.map((el) =>\n          el.id === id\n            ? {\n                ...el,\n                todoChecking: false,\n              }\n            : el\n        )\n      );\n    } else {\n      setItemList(\n        itemList?.map((el) =>\n          el.id === id\n            ? {\n                ...el,\n                todoChecking: true,\n              }\n            : el\n        )\n      );\n    }\n  };\n\n\n\n  const todoCount = (itemList: ItemListInterFace) => {\n    let doCount = 0;\n    let doLen = itemList?.length !== undefined ? itemList.length : 1;\n    itemList?.forEach((el) =>\n      el.todoChecking ? (doCount = doCount + 1) : doCount\n    );\n    setCount((doCount / doLen) * 100);\n  };\n\n  return (\n    <TodoContainer>\n      <TodoWrapper>\n        <TitleWrapper>\n          <Title>TODOLIST</Title>\n        </TitleWrapper>\n        <InputWrapper>\n          <input\n            name=\"make\"\n            type=\"text\"\n            value={text}\n            onChange={(e) => modifyInput(e)}\n          />\n          <i\n            className=\"fas fa-plus-square fa-3x\"\n            onClick={() => makeNew(text)}\n          ></i>\n        </InputWrapper>\n        <Item\n          item={item}\n          itemList={itemList}\n          deleteFunc={deleteFunc}\n          modifyFunc={modifyFunc}\n          doneFunc={doneFunc}\n          changeValue={changeValue}\n          modifyInput={modifyInput}\n          todoCheck={todoCheck}\n        />\n        <ProgressBar count={count} itemList={itemList?.length} />\n      </TodoWrapper>\n    </TodoContainer>\n  );\n}\n\nconst TodoContainer = styled.section`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #489cc1;\n  width: 100vw;\n  height: 100vh;\n`;\n\nconst TitleWrapper = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nconst TodoWrapper = styled.div`\n  position: static;\n  display: flex;\n  justify-content: flex-start;\n  flex-direction: column;\n  background-color: #ffff;\n  width: 60vw;\n  height: 70vh;\n`;\n\nconst InputWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  input {\n    width: 70%;\n    height: 40px;\n    margin-left: 10px;\n    border: 1px solid goldenrod;\n  }\n  i {\n    margin-left: 10px;\n    /* background-color: #f7f7f7; */\n    color: #489cc1;\n  }\n`;\n\nconst Title = styled.span`\n  color: #525e65;\n  font-size: 40px;\n  text-align: center;\n  margin: 20px 0;\n  /* position: absolute; */\n  animation-duration: 3s;\n  animation-name: slideIn;\n\n  @keyframes slideIn {\n    from {\n      margin-left: 100%;\n      width: 300%;\n    }\n\n    to {\n      margin-left: 0%;\n      width: 100%;\n    }\n  }\n`;\n\nexport default ToDo;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport ToDo from \"./ToDo\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ToDo />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}